---
source: crates/cli_bin/tests/patterns.rs
expression: v
---
- config:
    name: HiddenUtility
    body: "pattern HiddenUtility($oneArg, $twoArg) {\n  `$foo.hidden` => cool_thing_wrapper(input=`$foo.$oneArg.$twoArg`)\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 18
      column: 9
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: HiddenUtility
  body: "pattern HiddenUtility($oneArg, $twoArg) {\n  `$foo.hidden` => cool_thing_wrapper(input=`$foo.$oneArg.$twoArg`)\n}"
  kind: pattern
  language: js
  visibility: public
- config:
    name: NamedPattern
    body: "pattern NamedPattern() {\n    `$foo.named` => `$foo.replacement`\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 5
      column: 9
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: NamedPattern
  body: "pattern NamedPattern() {\n    `$foo.named` => `$foo.replacement`\n}"
  kind: pattern
  language: js
  visibility: public
- config:
    name: OtherPattern
    body: "pattern OtherPattern() {\n    `$foo.other` => `$foo.replacement`\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 1
      column: 9
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: OtherPattern
  body: "pattern OtherPattern() {\n    `$foo.other` => `$foo.replacement`\n}"
  kind: pattern
  language: js
  visibility: public
- config:
    name: PatternWithArgs
    body: "pattern PatternWithArgs($arg) {\n    `$foo.$arg` => `$foo.replacement`\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 9
      column: 9
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: PatternWithArgs
  body: "pattern PatternWithArgs($arg) {\n    `$foo.$arg` => `$foo.replacement`\n}"
  kind: pattern
  language: js
  visibility: public
- config:
    name: broken_pattern
    body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n"
    level: info
    title: "Compare `null` using  `===` or `!==`"
    description: "Comparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`."
    tags: ~
    samples:
      - name: "`$val == null` => `$val === null` to change"
        input: "if (val == null) {\n  done();\n}\n"
        output: "if (val === null) {\n  done();\n  console.log(\"This should be removed by grit patterns test --update\");\n}\n\n"
        input_range:
          start:
            line: 25
            column: 1
          end:
            line: 28
            column: 1
          startByte: 715
          endByte: 746
        output_range:
          start:
            line: 31
            column: 1
          end:
            line: 36
            column: 1
          startByte: 765
          endByte: 870
      - name: "`$val != null` => `$val !== null` not channge"
        input: "if (val != null) {\n  done();\n}\n"
        output: "if (val !== null) {\n  done();\n}\n"
        input_range:
          start:
            line: 41
            column: 1
          end:
            line: 44
            column: 1
          startByte: 939
          endByte: 970
        output_range:
          start:
            line: 47
            column: 1
          end:
            line: 50
            column: 1
          startByte: 989
          endByte: 1021
      - name: "`$val != null` => `$val !== null` into `while` not change"
        input: "while (val != null) {\n  did();\n}\n"
        output: "while (val !== null) {\n  did();\n}\n"
        input_range:
          start:
            line: 55
            column: 1
          end:
            line: 58
            column: 1
          startByte: 1102
          endByte: 1135
        output_range:
          start:
            line: 61
            column: 1
          end:
            line: 64
            column: 1
          startByte: 1154
          endByte: 1188
      - name: "Do not change `$val === null` not change"
        input: "if (val === null) {\n  done();\n}\n"
        output: ~
        input_range:
          start:
            line: 69
            column: 1
          end:
            line: 72
            column: 1
          startByte: 1252
          endByte: 1284
        output_range: ~
      - name: "Do not change `$val !== null` not change"
        input: "while (val !== null) {\n  doSomething();\n}\n"
        output: ~
        input_range:
          start:
            line: 77
            column: 1
          end:
            line: 80
            column: 1
          startByte: 1338
          endByte: 1380
        output_range: ~
    path: ".grit/patterns/broken_pattern.md"
    position:
      line: 10
      column: 1
    raw:
      format: markdown
      content: "---\ntitle: Compare `null` using  `===` or `!==`\n---\n\nComparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`.\n\ntags: #good\n\n```grit\nengine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n```\n\n## `$val == null` => `$val === null` to change\n\n```javascript\nif (val == null) {\n  done();\n}\n```\n\n```typescript\nif (val === null) {\n  done();\n  console.log(\"This should be removed by grit patterns test --update\");\n}\n\n```\n\n## `$val != null` => `$val !== null` not channge\n\n```javascript\nif (val != null) {\n  done();\n}\n```\n\n```typescript\nif (val !== null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` into `while` not change\n\n```javascript\nwhile (val != null) {\n  did();\n}\n```\n\n```typescript\nwhile (val !== null) {\n  did();\n}\n```\n\n## Do not change `$val === null` not change\n\n```javascript\nif (val === null) {\n  done();\n}\n```\n\n## Do not change `$val !== null` not change\n\n```\nwhile (val !== null) {\n  doSomething();\n}\n```\n"
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: broken_pattern
  body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n"
  kind: pattern
  language: js
  visibility: public
- config:
    name: cool_thing_wrapper
    body: "function cool_thing_wrapper($input) {\n  return `bob.$input`\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 13
      column: 10
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: cool_thing_wrapper
  body: "function cool_thing_wrapper($input) {\n  return `bob.$input`\n}"
  kind: function
  language: js
  visibility: public
- config:
    name: multiple_broken_patterns
    body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n"
    level: info
    title: "Compare `null` using  `===` or `!==`"
    description: "Comparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`."
    tags:
      - good
      - exclude2
    samples:
      - name: "`$val == null` => `$val === null` to change"
        input: "if (val == null) {\n  done();\n  cnonsole.log(\"This should be added to the output by patterns test --update\");\n}\n"
        output: "if (val === null) {\n  done();\n}\n"
        input_range:
          start:
            line: 24
            column: 1
          end:
            line: 28
            column: 1
          startByte: 729
          endByte: 840
        output_range:
          start:
            line: 31
            column: 1
          end:
            line: 34
            column: 1
          startByte: 859
          endByte: 891
      - name: "`$val != null` => `$val !== null` to channge"
        input: "if (val != null) {\n  done();\n  console.log(\"This should be added as well\");\n}\n"
        output: "if (val !== null) {\n  done();\n}\n"
        input_range:
          start:
            line: 39
            column: 1
          end:
            line: 43
            column: 1
          startByte: 959
          endByte: 1037
        output_range:
          start:
            line: 46
            column: 1
          end:
            line: 49
            column: 1
          startByte: 1056
          endByte: 1088
      - name: "`$val != null` => `$val !== null` into `while` not change"
        input: "while (val != null) {\n  did();\n}\n"
        output: "while (val !== null) {\n  did();\n}\n"
        input_range:
          start:
            line: 54
            column: 1
          end:
            line: 57
            column: 1
          startByte: 1169
          endByte: 1202
        output_range:
          start:
            line: 60
            column: 1
          end:
            line: 63
            column: 1
          startByte: 1221
          endByte: 1255
      - name: "Do not change `$val === null` not change"
        input: "if (val === null) {\n  done();\n}\n"
        output: ~
        input_range:
          start:
            line: 68
            column: 1
          end:
            line: 71
            column: 1
          startByte: 1319
          endByte: 1351
        output_range: ~
      - name: "Do not change `$val !== null` not change"
        input: "while (val !== null) {\n  doSomething();\n}\n"
        output: ~
        input_range:
          start:
            line: 76
            column: 1
          end:
            line: 79
            column: 1
          startByte: 1405
          endByte: 1447
        output_range: ~
    path: ".grit/patterns/multiple_broken_patterns.md"
    position:
      line: 9
      column: 1
    raw:
      format: markdown
      content: "---\ntitle: Compare `null` using  `===` or `!==`\ntags: [\"good\", \"exclude2\"]\n---\n\nComparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`.\n\n```grit\nengine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n```\n\n## `$val == null` => `$val === null` to change\n\n```javascript\nif (val == null) {\n  done();\n  cnonsole.log(\"This should be added to the output by patterns test --update\");\n}\n```\n\n```typescript\nif (val === null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` to channge\n\n```javascript\nif (val != null) {\n  done();\n  console.log(\"This should be added as well\");\n}\n```\n\n```typescript\nif (val !== null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` into `while` not change\n\n```javascript\nwhile (val != null) {\n  did();\n}\n```\n\n```typescript\nwhile (val !== null) {\n  did();\n}\n```\n\n## Do not change `$val === null` not change\n\n```javascript\nif (val === null) {\n  done();\n}\n```\n\n## Do not change `$val !== null` not change\n\n```\nwhile (val !== null) {\n  doSomething();\n}\n```\n"
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: multiple_broken_patterns
  body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n"
  kind: pattern
  language: js
  visibility: public
- config:
    name: no_eq_null
    body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n"
    level: info
    title: "Compare `null` using  `===` or `!==`"
    description: "Comparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`."
    tags: ~
    samples:
      - name: "`$val == null` => `$val === null`"
        input: "if (val == null) {\n  done();\n}\n"
        output: "if (val === null) {\n  done();\n}\n"
        input_range:
          start:
            line: 25
            column: 1
          end:
            line: 28
            column: 1
          startByte: 716
          endByte: 747
        output_range:
          start:
            line: 31
            column: 1
          end:
            line: 34
            column: 1
          startByte: 766
          endByte: 798
      - name: "`$val != null` => `$val !== null`"
        input: "if (val != null) {\n  done();\n}\n"
        output: "if (val !== null) {\n  done();\n}\n"
        input_range:
          start:
            line: 39
            column: 1
          end:
            line: 42
            column: 1
          startByte: 855
          endByte: 886
        output_range:
          start:
            line: 45
            column: 1
          end:
            line: 48
            column: 1
          startByte: 905
          endByte: 937
      - name: "`$val != null` => `$val !== null` into `while`"
        input: "while (val != null) {\n  did();\n}\n"
        output: "while (val !== null) {\n  did();\n}\n"
        input_range:
          start:
            line: 53
            column: 1
          end:
            line: 56
            column: 1
          startByte: 1007
          endByte: 1040
        output_range:
          start:
            line: 59
            column: 1
          end:
            line: 62
            column: 1
          startByte: 1059
          endByte: 1093
      - name: "Do not change `$val === null`"
        input: "if (val === null) {\n  done();\n}\n"
        output: ~
        input_range:
          start:
            line: 67
            column: 1
          end:
            line: 70
            column: 1
          startByte: 1146
          endByte: 1178
        output_range: ~
      - name: "Do not change `$val !== null`"
        input: "while (val !== null) {\n  doSomething();\n}\n"
        output: ~
        input_range:
          start:
            line: 75
            column: 1
          end:
            line: 78
            column: 1
          startByte: 1221
          endByte: 1263
        output_range: ~
    path: ".grit/patterns/no_eq_null.md"
    position:
      line: 10
      column: 1
    raw:
      format: markdown
      content: "---\ntitle: Compare `null` using  `===` or `!==`\n---\n\nComparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`.\n\ntags: #good, #exclude1\n\n```grit\nengine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n```\n\n## `$val == null` => `$val === null`\n\n```javascript\nif (val == null) {\n  done();\n}\n```\n\n```typescript\nif (val === null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null`\n\n```javascript\nif (val != null) {\n  done();\n}\n```\n\n```typescript\nif (val !== null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` into `while`\n\n```javascript\nwhile (val != null) {\n  did();\n}\n```\n\n```typescript\nwhile (val !== null) {\n  did();\n}\n```\n\n## Do not change `$val === null`\n\n```javascript\nif (val === null) {\n  done();\n}\n```\n\n## Do not change `$val !== null`\n\n```\nwhile (val !== null) {\n  doSomething();\n}\n```\n"
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: no_eq_null
  body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n"
  kind: pattern
  language: js
  visibility: public
- config:
    name: remove_console_error
    body: "engine marzano(0.1)\nlanguage js\n\n`console.error($_)` => .\n"
    level: error
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/grit.yml"
    position:
      line: 3
      column: 11
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: remove_console_error
  body: "engine marzano(0.1)\nlanguage js\n\n`console.error($_)` => .\n"
  kind: pattern
  language: js
  visibility: public
