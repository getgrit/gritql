---
source: crates/cli_bin/tests/patterns.rs
expression: v
---
- config:
    name: HiddenUtility
    body: "pattern HiddenUtility($oneArg, $twoArg) {\n  `$foo.hidden` => cool_thing_wrapper(input=`$foo.$oneArg.$twoArg`)\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 18
      column: 9
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: HiddenUtility
  body: "pattern HiddenUtility($oneArg, $twoArg) {\n  `$foo.hidden` => cool_thing_wrapper(input=`$foo.$oneArg.$twoArg`)\n}"
  kind: pattern
  language: js
  visibility: public
- config:
    name: NamedPattern
    body: "pattern NamedPattern() {\n    `$foo.named` => `$foo.replacement`\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 5
      column: 9
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: NamedPattern
  body: "pattern NamedPattern() {\n    `$foo.named` => `$foo.replacement`\n}"
  kind: pattern
  language: js
  visibility: public
- config:
    name: OtherPattern
    body: "pattern OtherPattern() {\n    `$foo.other` => `$foo.replacement`\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 1
      column: 9
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: OtherPattern
  body: "pattern OtherPattern() {\n    `$foo.other` => `$foo.replacement`\n}"
  kind: pattern
  language: js
  visibility: public
- config:
    name: PatternWithArgs
    body: "pattern PatternWithArgs($arg) {\n    `$foo.$arg` => `$foo.replacement`\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 9
      column: 9
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: PatternWithArgs
  body: "pattern PatternWithArgs($arg) {\n    `$foo.$arg` => `$foo.replacement`\n}"
  kind: pattern
  language: js
  visibility: public
- config:
    name: broken_pattern
    body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n"
    level: info
    title: Compare null using  === or !==
    description: "Comparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`."
    tags:
      - good
    samples:
      - name: "`$val == null` => `$val === null` to change"
        input: "if (val == null) {\n  done();\n}"
        output: "if (val === null) {\n  done();\n  console.log(\"This should be removed by grit patterns test --update\");\n}\n"
        input_range:
          start:
            line: 25
            column: 1
          end:
            line: 27
            column: 4
          startByte: 701
          endByte: 749
        output_range:
          start:
            line: 31
            column: 1
          end:
            line: 35
            column: 4
          startByte: 751
          endByte: 873
      - name: "`$val != null` => `$val !== null` not channge"
        input: "if (val != null) {\n  done();\n}"
        output: "if (val !== null) {\n  done();\n}"
        input_range:
          start:
            line: 41
            column: 1
          end:
            line: 43
            column: 4
          startByte: 925
          endByte: 973
        output_range:
          start:
            line: 47
            column: 1
          end:
            line: 49
            column: 4
          startByte: 975
          endByte: 1024
      - name: "`$val != null` => `$val !== null` into `while` not change"
        input: "while (val != null) {\n  did();\n}"
        output: "while (val !== null) {\n  did();\n}"
        input_range:
          start:
            line: 55
            column: 1
          end:
            line: 57
            column: 4
          startByte: 1088
          endByte: 1138
        output_range:
          start:
            line: 61
            column: 1
          end:
            line: 63
            column: 4
          startByte: 1140
          endByte: 1191
      - name: "Do not change `$val === null` not change"
        input: "if (val === null) {\n  done();\n}"
        output: ~
        input_range:
          start:
            line: 69
            column: 1
          end:
            line: 71
            column: 4
          startByte: 1238
          endByte: 1287
        output_range:
          start:
            line: 69
            column: 1
          end:
            line: 71
            column: 4
          startByte: 1238
          endByte: 1287
      - name: "Do not change `$val !== null` not change"
        input: "while (val !== null) {\n  doSomething();\n}"
        output: ~
        input_range:
          start:
            line: 77
            column: 1
          end:
            line: 79
            column: 4
          startByte: 1334
          endByte: 1383
        output_range: ~
    path: ".grit/patterns/broken_pattern.md"
    position:
      line: 10
      column: 1
    raw:
      format: markdown
      content: "---\ntitle: Compare `null` using  `===` or `!==`\n---\n\nComparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`.\n\ntags: #good\n\n```grit\nengine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n```\n\n## `$val == null` => `$val === null` to change\n\n```javascript\nif (val == null) {\n  done();\n}\n```\n\n```typescript\nif (val === null) {\n  done();\n  console.log(\"This should be removed by grit patterns test --update\");\n}\n\n```\n\n## `$val != null` => `$val !== null` not channge\n\n```javascript\nif (val != null) {\n  done();\n}\n```\n\n```typescript\nif (val !== null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` into `while` not change\n\n```javascript\nwhile (val != null) {\n  did();\n}\n```\n\n```typescript\nwhile (val !== null) {\n  did();\n}\n```\n\n## Do not change `$val === null` not change\n\n```javascript\nif (val === null) {\n  done();\n}\n```\n\n## Do not change `$val !== null` not change\n\n```\nwhile (val !== null) {\n  doSomething();\n}\n```\n"
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: broken_pattern
  body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n"
  kind: pattern
  language: js
  visibility: public
- config:
    name: cool_thing_wrapper
    body: "function cool_thing_wrapper($input) {\n  return `bob.$input`\n}"
    level: ~
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/patterns/other.grit"
    position:
      line: 13
      column: 10
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: cool_thing_wrapper
  body: "function cool_thing_wrapper($input) {\n  return `bob.$input`\n}"
  kind: function
  language: js
  visibility: public
- config:
    name: multiple_broken_patterns
    body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n"
    level: info
    title: Compare null using  === or !==
    description: "Comparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`."
    tags:
      - good
      - exclude2
    samples:
      - name: "`$val == null` => `$val === null` to change"
        input: "if (val == null) {\n  done();\n  cnonsole.log(\"This should be added to the output by patterns test --update\");\n}"
        output: "if (val === null) {\n  done();\n}"
        input_range:
          start:
            line: 29
            column: 1
          end:
            line: 32
            column: 4
          startByte: 722
          endByte: 850
        output_range:
          start:
            line: 36
            column: 1
          end:
            line: 38
            column: 4
          startByte: 852
          endByte: 901
      - name: "`$val != null` => `$val !== null` to channge"
        input: "if (val != null) {\n  done();\n  console.log(\"This should be added as well\");\n}"
        output: "if (val !== null) {\n  done();\n}"
        input_range:
          start:
            line: 44
            column: 1
          end:
            line: 47
            column: 4
          startByte: 952
          endByte: 1047
        output_range:
          start:
            line: 51
            column: 1
          end:
            line: 53
            column: 4
          startByte: 1049
          endByte: 1098
      - name: "`$val != null` => `$val !== null` into `while` not change"
        input: "while (val != null) {\n  did();\n}"
        output: "while (val !== null) {\n  did();\n}"
        input_range:
          start:
            line: 59
            column: 1
          end:
            line: 61
            column: 4
          startByte: 1162
          endByte: 1212
        output_range:
          start:
            line: 65
            column: 1
          end:
            line: 67
            column: 4
          startByte: 1214
          endByte: 1265
      - name: "Do not change `$val === null` not change"
        input: "if (val === null) {\n  done();\n}"
        output: ~
        input_range:
          start:
            line: 73
            column: 1
          end:
            line: 75
            column: 4
          startByte: 1312
          endByte: 1361
        output_range:
          start:
            line: 73
            column: 1
          end:
            line: 75
            column: 4
          startByte: 1312
          endByte: 1361
      - name: "Do not change `$val !== null` not change"
        input: "while (val !== null) {\n  doSomething();\n}"
        output: ~
        input_range:
          start:
            line: 81
            column: 1
          end:
            line: 83
            column: 4
          startByte: 1408
          endByte: 1457
        output_range: ~
    path: ".grit/patterns/multiple_broken_patterns.md"
    position:
      line: 10
      column: 1
    raw:
      format: markdown
      content: "---\ntitle: Compare `null` using  `===` or `!==`\n---\n\nComparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`.\n\ntags: #good, #exclude2\n\n```grit\nengine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n```\n\n```\n\n```\n\n## `$val == null` => `$val === null` to change\n\n```javascript\nif (val == null) {\n  done();\n  cnonsole.log(\"This should be added to the output by patterns test --update\");\n}\n```\n\n```typescript\nif (val === null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` to channge\n\n```javascript\nif (val != null) {\n  done();\n  console.log(\"This should be added as well\");\n}\n```\n\n```typescript\nif (val !== null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` into `while` not change\n\n```javascript\nwhile (val != null) {\n  did();\n}\n```\n\n```typescript\nwhile (val !== null) {\n  did();\n}\n```\n\n## Do not change `$val === null` not change\n\n```javascript\nif (val === null) {\n  done();\n}\n```\n\n## Do not change `$val !== null` not change\n\n```\nwhile (val !== null) {\n  doSomething();\n}\n```\n"
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: multiple_broken_patterns
  body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n"
  kind: pattern
  language: js
  visibility: public
- config:
    name: no_eq_null
    body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n"
    level: info
    title: Compare null using  === or !==
    description: "Comparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`."
    tags:
      - good
      - exclude1
    samples:
      - name: "`$val == null` => `$val === null`"
        input: "if (val == null) {\n  done();\n}"
        output: "if (val === null) {\n  done();\n}"
        input_range:
          start:
            line: 29
            column: 1
          end:
            line: 31
            column: 4
          startByte: 712
          endByte: 760
        output_range:
          start:
            line: 35
            column: 1
          end:
            line: 37
            column: 4
          startByte: 762
          endByte: 811
      - name: "`$val != null` => `$val !== null`"
        input: "if (val != null) {\n  done();\n}"
        output: "if (val !== null) {\n  done();\n}"
        input_range:
          start:
            line: 43
            column: 1
          end:
            line: 45
            column: 4
          startByte: 851
          endByte: 899
        output_range:
          start:
            line: 49
            column: 1
          end:
            line: 51
            column: 4
          startByte: 901
          endByte: 950
      - name: "`$val != null` => `$val !== null` into `while`"
        input: "while (val != null) {\n  did();\n}"
        output: "while (val !== null) {\n  did();\n}"
        input_range:
          start:
            line: 57
            column: 1
          end:
            line: 59
            column: 4
          startByte: 1003
          endByte: 1053
        output_range:
          start:
            line: 63
            column: 1
          end:
            line: 65
            column: 4
          startByte: 1055
          endByte: 1106
      - name: "Do not change `$val === null`"
        input: "if (val === null) {\n  done();\n}"
        output: ~
        input_range:
          start:
            line: 71
            column: 1
          end:
            line: 73
            column: 4
          startByte: 1142
          endByte: 1191
        output_range:
          start:
            line: 71
            column: 1
          end:
            line: 73
            column: 4
          startByte: 1142
          endByte: 1191
      - name: "Do not change `$val !== null`"
        input: "while (val !== null) {\n  doSomething();\n}"
        output: ~
        input_range:
          start:
            line: 79
            column: 1
          end:
            line: 81
            column: 4
          startByte: 1227
          endByte: 1276
        output_range: ~
    path: ".grit/patterns/no_eq_null.md"
    position:
      line: 10
      column: 1
    raw:
      format: markdown
      content: "---\ntitle: Compare `null` using  `===` or `!==`\n---\n\nComparing to `null` needs a type-checking operator (=== or !==), to avoid incorrect results when the value is `undefined`.\n\ntags: #good, #exclude1\n\n```grit\nengine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n\n```\n\n```\n\n```\n\n## `$val == null` => `$val === null`\n\n```javascript\nif (val == null) {\n  done();\n}\n```\n\n```typescript\nif (val === null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null`\n\n```javascript\nif (val != null) {\n  done();\n}\n```\n\n```typescript\nif (val !== null) {\n  done();\n}\n```\n\n## `$val != null` => `$val !== null` into `while`\n\n```javascript\nwhile (val != null) {\n  did();\n}\n```\n\n```typescript\nwhile (val !== null) {\n  did();\n}\n```\n\n## Do not change `$val === null`\n\n```javascript\nif (val === null) {\n  done();\n}\n```\n\n## Do not change `$val !== null`\n\n```\nwhile (val !== null) {\n  doSomething();\n}\n```\n"
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: no_eq_null
  body: "engine marzano(0.1)\nlanguage js\n\n// We use the syntax-tree node binary_expression to capture all expressions where $a and $b are operated on by \"==\" or \"!=\".\n// This code takes advantage of Grit's allowing us to nest rewrites inside match conditions and to match syntax-tree fields on patterns.\nbinary_expression($operator, $left, $right) where {\n    $operator <: or  { \"==\" => `===` , \"!=\" => `!==` },\n    or { $left <: `null`, $right <: `null`}\n}\n"
  kind: pattern
  language: js
  visibility: public
- config:
    name: remove_console_error
    body: "engine marzano(0.1)\nlanguage js\n\n`console.error($_)` => .\n"
    level: error
    title: ~
    description: ~
    tags: ~
    samples: ~
    path: ".grit/grit.yml"
    position:
      line: 3
      column: 11
    raw: ~
  module:
    type: Module
    host: ""
    fullName: ""
    remote: ""
    providerName: ""
  localName: remove_console_error
  body: "engine marzano(0.1)\nlanguage js\n\n`console.error($_)` => .\n"
  kind: pattern
  language: js
  visibility: public
