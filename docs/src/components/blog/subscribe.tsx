'use client';

import { useState } from 'react';

/**
 * THIS CODE IS AUTOGENERATED FROM LOOPS.
 * YOU CAN EDIT IT, BUT DO NOT WORRY TOO MUCH ABOUT CODE CONVENTIONS.
 */

const INIT = 'INIT';
const SUBMITTING = 'SUBMITTING';
const ERROR = 'ERROR';
const SUCCESS = 'SUCCESS';
const formStates = [INIT, SUBMITTING, ERROR, SUCCESS] as const;
const domain = 'app.loops.so';
const formId = 'clbv8x1hi01y7jq080lwh9hym';

function isValidEmail(email: any) {
  return /.+@.+/.test(email);
}

export function Subscribe({ cta }: { cta: string }) {
  const [email, setEmail] = useState('');
  const [formState, setFormState] = useState<(typeof formStates)[number]>(INIT);
  const [errorMessage, setErrorMessage] = useState('');

  const resetForm = () => {
    setEmail('');
    setFormState(INIT);
    setErrorMessage('');
  };

  /**
   * Rate limit the number of submissions allowed
   * @returns {boolean} true if the form has been successfully submitted in the past minute
   */
  const hasRecentSubmission = () => {
    const time = new Date();
    const timestamp = time.valueOf();
    const previousTimestamp = localStorage.getItem('loops-form-timestamp');

    // Indicate if the last sign up was less than a minute ago
    if (previousTimestamp && Number(previousTimestamp) + 60 * 1000 > timestamp) {
      setFormState(ERROR);
      setErrorMessage('Too many signups, please try again in a little while');
      return true;
    }

    localStorage.setItem('loops-form-timestamp', timestamp.toString());
    return false;
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    // Prevent the default form submission
    event.preventDefault();

    console.log('submitting form', email);

    // boundary conditions for submission
    if (![INIT, ERROR].includes(formState)) return;
    if (!isValidEmail(email)) {
      setFormState(ERROR);
      setErrorMessage('Please enter a valid email');
      return;
    }
    if (hasRecentSubmission()) return;
    setFormState(SUBMITTING);

    // build body
    const formBody = `email=${encodeURIComponent(email)}`;

    // API request to add user to newsletter
    fetch(`https://${domain}/api/newsletter-form/${formId}`, {
      method: 'POST',
      body: formBody,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    })
      .then((res: any) => [res.ok, res.json(), res])
      .then(([ok, dataPromise, res]) => {
        if (ok) {
          resetForm();
          setFormState(SUCCESS);
        } else {
          dataPromise.then((data: any) => {
            setFormState(ERROR);
            setErrorMessage(data.message || res.statusText);
            localStorage.setItem('loops-form-timestamp', '');
          });
        }
      })
      .catch((error) => {
        setFormState(ERROR);
        // check for cloudflare error
        if (error.message === 'Failed to fetch') {
          setErrorMessage('Too many signups, please try again in a little while');
        } else if (error.message) {
          setErrorMessage(error.message);
        }
        localStorage.setItem('loops-form-timestamp', '');
      });
  };

  return (
    <div className='group bg-gradient-to-r from-blizzardBlue-200 to-blizzardBlue-300 items-center justify-center rounded-xl p-6 mt-4'>
      <div className='text-sm text-black p-0 m-0mb-4 text-2xl md:text-4xl font-bold tracking-tight text-gray-900 md:font-extrabold lg:leading-none md:text-center lg:mb-7'>
        {cta}
      </div>
      {formState === SUCCESS ? (
        <div className='text-green-600 text-2xl text-center'>Thank you for subscribing!</div>
      ) : (
        <form className='w-full flex relative' onSubmit={handleSubmit}>
          <div className='absolute inset-y-0 left-0 flex items-center pl-4 pointer-events-none'>
            <svg
              className='w-4 h-4 text-gray-500'
              aria-hidden='true'
              xmlns='http://www.w3.org/2000/svg'
              fill='currentColor'
              viewBox='0 0 20 16'
            >
              <path d='m10.036 8.278 9.258-7.79A1.979 1.979 0 0 0 18 0H2A1.987 1.987 0 0 0 .641.541l9.395 7.737Z'></path>
              <path d='M11.241 9.817c-.36.275-.801.425-1.255.427-.428 0-.845-.138-1.187-.395L0 2.6V14a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2.5l-8.759 7.317Z'></path>
            </svg>
          </div>
          <input
            type='email'
            onChange={(e) => setEmail(e.target.value)}
            id='member_email'
            name='email_address'
            className='block w-full px-3 py-4 pl-11 text-base text-gray-900 bg-white border border-gray-200 rounded-l-xl focus:ring-blue-500 focus:border-blue-500'
            placeholder='Enter your email'
          />
          <div>
            <input
              type='submit'
              id='member_submit'
              disabled={formState === SUBMITTING}
              className='w-32 py-4 text-base font-medium text-center text-white bg-primary-500 border border-blue-700 cursor-pointer rounded-r-xl hover:bg-blue-800 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:border-blue-600 relative -ml-1'
              value={formState === SUBMITTING ? 'Submitting...' : 'Subscribe'}
            />
          </div>
        </form>
      )}
      {formState === ERROR && <div className='text-red-600 mt-2'>{errorMessage}</div>}
    </div>
  );
}
