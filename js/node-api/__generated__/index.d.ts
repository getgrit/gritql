/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Position {
  /** 1-based line number in the source file. */
  line: number
  /** 1-based column number in the source file. */
  column: number
}
export interface RangeWithoutByte {
  start: Position
  end: Position
}
export interface RangePair {
  before: RangeWithoutByte
  after: RangeWithoutByte
}
export interface FileDiff {
  oldPath?: string
  newPath?: string
  ranges: Array<RangePair>
}
export interface RichFile {
  path: string
  content: string
}
export class UncompiledPatternBuilder {
  static new_snippet(text: string): UncompiledPatternBuilder
  /** Filter this pattern to only match instances that contain the other pattern */
  contains(other: UncompiledPatternBuilder): UncompiledPatternBuilder
  /** Filter the pattern to only match instances that match a provided callback */
  filter(callback: (arg: ResultBinding) => any): UncompiledPatternBuilder
  /** Run the pattern on a list of files and return the number of matching files found */
  runOnFiles(files: Array<RichFile>): Promise<number>
  /**
   * Apply the query to a single file and return the modified file (if any)
   * @param file The file to apply the query to
   * @returns The modified file (if it was modified)
   */
  runOnFile(file: RichFile): Promise<RichFile | null>
}
/**
 * Resolved bindings provide hooks for JavaScript code to interact with a bit of code that has been matched by a pattern.
 * The binding corresponds to a specific piece of text, which can be further filtered against or modified inside a JavaScript callback.
 */
export class ResultBinding {
  /** Retrieves the stringified representation of the binding (ie. the actual source code) */
  text(): string
  /** If the binding was found in a source file, return the position of the binding. */
  range(): RangeWithoutByte | null
  /** Retrieves the absolute file name of the file containing the current binding. */
  filename(): string
  /**
   * Inserts the provided text after the binding.
   * The GritQL engine handles the insertion of the text in transformed output code.
   */
  append(text: string): void
  /**
   * Retrieve a variable's text from the current scope.
   * @hidden This API is not stable yet.
   */
  findVarText(name: string): string | null
}
